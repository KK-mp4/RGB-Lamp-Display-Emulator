{"version":3,"file":"index.b3663415.js","sources":["../../../../pages/index.vue"],"sourcesContent":["<script setup lang=\"ts\">\r\nuseHead({ title: \"Generator\" });\r\n\r\nconst packSize = ref(\"8x8\");\r\n\r\nconst src = ref(\"\");\r\nasync function Draw() {\r\n  const img = new Image();\r\n  img.src = url;\r\n  await new Promise((resolve) => {\r\n    img.onload = () => resolve(1);\r\n  });\r\n\r\n  let imgWidth = img.width;\r\n  let imgHeight = img.height;\r\n\r\n  if (imgWidth > 512) {\r\n    imgWidth = 512;\r\n  }\r\n\r\n  if (imgHeight > 512) {\r\n    imgHeight = 512;\r\n  }\r\n\r\n  let textureSize = 0;\r\n  if (packSize.value === \"4x4\") {\r\n    textureSize = 4;\r\n  }\r\n  else if (packSize.value === \"8x8\") {\r\n    textureSize = 8;\r\n  }\r\n  else {\r\n    textureSize = 16;\r\n  }\r\n\r\n  const imgCanvas = document.createElement(\"canvas\");\r\n  imgCanvas.width = imgWidth;\r\n  imgCanvas.height = imgHeight;\r\n  const imgContext = imgCanvas.getContext(\"2d\");\r\n  imgContext.drawImage(img, 0, 0, img.width, img.height);\r\n\r\n  // Loading textures\r\n  const R_Off = new Image();\r\n  R_Off.src = \"/\" + packSize.value + \"/ROff.png\";\r\n  await new Promise((resolve) => {\r\n    R_Off.onload = () => resolve(1);\r\n  });\r\n\r\n  const R_On = new Image();\r\n  R_On.src = \"/\" + packSize.value + \"/ROn.png\";\r\n  await new Promise((resolve) => {\r\n    R_On.onload = () => resolve(1);\r\n  });\r\n\r\n  const G_Off = new Image();\r\n  G_Off.src = \"/\" + packSize.value + \"/GOff.png\";\r\n  await new Promise((resolve) => {\r\n    G_Off.onload = () => resolve(1);\r\n  });\r\n\r\n  const G_On = new Image();\r\n  G_On.src = \"/\" + packSize.value + \"/GOn.png\";\r\n  await new Promise((resolve) => {\r\n    G_On.onload = () => resolve(1);\r\n  });\r\n\r\n  const B_Off = new Image();\r\n  B_Off.src = \"/\" + packSize.value + \"/BOff.png\";\r\n  await new Promise((resolve) => {\r\n    B_Off.onload = () => resolve(1);\r\n  });\r\n\r\n  const B_On = new Image();\r\n  B_On.src = \"/\" + packSize.value + \"/BOn.png\";\r\n  await new Promise((resolve) => {\r\n    B_On.onload = () => resolve(1);\r\n  });\r\n\r\n  const canvas = document.createElement(\"canvas\");\r\n  canvas.width = imgWidth * 3 * textureSize;\r\n  canvas.height = imgHeight * 3 * textureSize;\r\n  const ctx = canvas.getContext(\"2d\");\r\n\r\n  for (let i = 0; i < imgHeight; i++) {\r\n    for (let j = 0; j < imgWidth; j++) {\r\n      const color = imgContext.getImageData(j, i, 1, 1).data;\r\n\r\n      if (color[0] >= 128) {\r\n        ctx.drawImage(R_On, j * 3 * textureSize, i * 3 * textureSize);\r\n        ctx.drawImage(R_On, j * 3 * textureSize, (i * 3 * textureSize) + textureSize);\r\n        ctx.drawImage(R_On, j * 3 * textureSize, (i * 3 * textureSize) + textureSize * 2);\r\n      } else {\r\n        ctx.drawImage(R_Off, j * 3 * textureSize, i * 3 * textureSize);\r\n        ctx.drawImage(R_Off, j * 3 * textureSize, (i * 3 * textureSize) + textureSize);\r\n        ctx.drawImage(R_Off, j * 3 * textureSize, (i * 3 * textureSize) + textureSize * 2);\r\n      }\r\n\r\n      if (color[1] >= 128) {\r\n        ctx.drawImage(G_On, j * 3 * textureSize + textureSize, i * 3 * textureSize);\r\n        ctx.drawImage(G_On, j * 3 * textureSize + textureSize, (i * 3 * textureSize) + textureSize);\r\n        ctx.drawImage(G_On, j * 3 * textureSize + textureSize, (i * 3 * textureSize) + textureSize * 2);\r\n      } else {\r\n        ctx.drawImage(G_Off, j * 3 * textureSize + textureSize, i * 3 * textureSize);\r\n        ctx.drawImage(G_Off, j * 3 * textureSize + textureSize, (i * 3 * textureSize) + textureSize);\r\n        ctx.drawImage(G_Off, j * 3 * textureSize + textureSize, (i * 3 * textureSize) + textureSize * 2);\r\n      }\r\n\r\n      if (color[2] >= 128) {\r\n        ctx.drawImage(B_On, j * 3 * textureSize + (textureSize * 2), i * 3 * textureSize);\r\n        ctx.drawImage(B_On, j * 3 * textureSize + (textureSize * 2), (i * 3 * textureSize) + textureSize);\r\n        ctx.drawImage(B_On, j * 3 * textureSize + (textureSize * 2), (i * 3 * textureSize) + textureSize * 2);\r\n      } else {\r\n        ctx.drawImage(B_Off, j * 3 * textureSize + (textureSize * 2), i * 3 * textureSize);\r\n        ctx.drawImage(B_Off, j * 3 * textureSize + (textureSize * 2), (i * 3 * textureSize) + textureSize);\r\n        ctx.drawImage(B_Off, j * 3 * textureSize + (textureSize * 2), (i * 3 * textureSize) + textureSize * 2);\r\n      }\r\n    }\r\n  }\r\n\r\n  src.value = canvas.toDataURL();\r\n}\r\n\r\nlet url;\r\n\r\n\r\nasync function UploadImg(event) {\r\n    if (event.target.files && event.target.files[0]) {\r\n        let reader = new FileReader();\r\n\r\n        reader.readAsDataURL(event.target.files[0]); // read file as data url\r\n\r\n        reader.onload = (event) => { // called once readAsDataURL is completed\r\n        url = event.target.result;\r\n        Draw();\r\n        }\r\n        console.log(\"Image loaded: \" + url);\r\n    }\r\n}\r\n\r\n</script>\r\n\r\n<template>\r\n  <div class=\"flex justify-center flex-wrap pt-2 flex-col items-center\">\r\n    <p class=\"text-lg text-gray-300\">RGB Lamp Display Emulator by KK</p>\r\n    <a class=\"mb-5 text-xs text-blue-400 underline\" href=\"https://github.com/KK-mp4/RGB-Lamp-Display-Emulator#readme\" target=\"_blank\">More info in GitHub</a>\r\n    <select v-model=\"packSize\" class=\"w-64 mb-5 rounded-lg border h-7 bg-gray-700 border-gray-600 text-gray-400\">\r\n      <option value=\"4x4\">4x4</option>\r\n      <option value=\"8x8\">8x8</option>\r\n      <option value=\"16x16\">16x16</option>\r\n    </select>\r\n    <input class=\"block text-sm text-gray-400 rounded-lg border cursor-pointer focus:outline-none bg-gray-700 border-gray-600 placeholder-gray-400\" type=\"file\" accept=\".png, .jpg\" @change=\"UploadImg($event)\">\r\n    <p class=\"mt-1 text-sm text-gray-300\">PNG or JPG (512x512px max).</p>\r\n    <div\r\n      class=\"w-full h-full mt-5 flex justify-center\"\r\n      style=\"image-rendering: pixelated\"\r\n    >\r\n      <img :src=\"src\" class=\"w-[75%]\" />\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style>\r\n#canvas {\r\n  border: 1px solid white;\r\n}\r\n</style>\r\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AACA,YAAA,EAAA,OAAA,YAAA,CAAA;AAEA,QAAA,KAAA;AAEA,UAAA,MAAA,IAAA,EAAA;;;;;;;;;;;;;"}